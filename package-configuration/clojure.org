#+title Clojure
#+author Daan van Berkel
#+email daan.v.berkel.1980@gmail.com

We are following the tutorial [[http://www.braveclojure.com/][Clojure for the Brave and True]] and we
have taken suggestions from the provided [[https://github.com/flyingmachine/emacs-for-clojure][~/.emacs.d]] project.

We want to enable paredit for Clojure

#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'enable-paredit-mode)
#+end_src

The following is useful for working with camel-case tokens, like names
of Java classes (e.g. JavaClassName)

#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'subword-mode)
#+end_src

A little more syntax highlighting

#+begin_src emacs-lisp
(require 'clojure-mode-extra-font-locking)
#+end_src

syntax hilighting for midje

#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")
            (font-lock-add-keywords
             nil
             '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
               ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
            (define-clojure-indent (fact 1))
            (define-clojure-indent (facts 1))))
#+end_src

* Cider

Provides minibuffer documentation for the code you're typing into the
repl

#+begin_src emacs-lisp
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
#+end_src


Go right to the REPL buffer when it's finished connecting

#+begin_src emacs-lisp
(setq cider-repl-pop-to-buffer-on-connect t)
#+end_src

When there's a cider error, show its buffer and switch to it

#+begin_src emacs-lisp
(setq cider-show-error-buffer t)
(setq cider-auto-select-error-buffer t)
#+end_src

Where to store the cider history.

#+begin_src emacs-lisp
(setq cider-repl-history-file "~/.emacs.d/cider-history")
#+end_src

Wrap when navigating history.

#+begin_src emacs-lisp
(setq cider-repl-wrap-history t)
#+end_src

Enable paredit in your REPL

#+begin_src emacs-lisp
(add-hook 'cider-repl-mode-hook 'paredit-mode)
#+end_src

Use clojure mode for other extensions

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
(add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))
#+end_src

** key bindings

These help me out with the way I usually develop web apps

#+begin_src emacs-lisp
(defun cider-start-http-server ()
  (interactive)
  (cider-load-current-buffer)
  (let ((ns (cider-current-ns)))
    (cider-repl-set-ns ns)
    (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
    (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


(defun cider-refresh ()
  (interactive)
  (cider-interactive-eval (format "(user/reset)")))

(defun cider-user-ns ()
  (interactive)
  (cider-repl-set-ns "user"))

(eval-after-load 'cider
  '(progn
     (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
     (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
     (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
     (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
#+end_src
